#include <iostream>
#include <vector>
#include <cassert>
template<typename T>
class Matrix {
private:
    std::vector<std::vector<T>> a;
    size_t n, m;

public:
    Matrix(std::vector<std::vector<T>> b) : a(b) {
        n = a.size();
        m = 0;
        if (n > 0) {
            m = a[0].size();
        }
    }
    std::vector<T> operator[] (size_t i) const {
        return a[i];
    }
    std::pair<size_t, size_t> size() const {
        return { n, m };
    }
    Matrix<T> operator= (const Matrix<T>& b) {
        a = b.a;
        n = b.n;
        m = b.m;
        return *this;
    }
    Matrix<T> operator= (Matrix<T>&& b) {
        a = b.a;
        n = b.n;
        m = b.m;
        return *this;
    }
    Matrix<T>(const Matrix<T>& b) {
        a = b.a;
        n = b.n;
        m = b.m;
    }
    Matrix<T>(Matrix<T>&& b) {
        a = b.a;
        n = b.n;
        m = b.m;
    }
    Matrix<T> operator + (const Matrix<T>& b) const {
        Matrix<T> c = a;
        if (n == b.n && m == b.m) {
            for (size_t i = 0; i < n; i++)
                for (size_t j = 0; j < m; j++)
                    c.a[i][j] = a[i][j] + b.a[i][j];
        }
        return c;
    }
    Matrix<T> operator+= (const Matrix<T>& b) {
        *this = *this + b;
        return *this;
    }
    Matrix<T> operator * (int b) const {
        Matrix<T> c = a;
        for (size_t i = 0; i < n; i++)
            for (size_t j = 0; j < m; j++)
                c.a[i][j] = a[i][j] * b;
        return c;
    }
    Matrix<T> operator*= (int b) {
        *this = *this * b;
        return *this;
    }
    Matrix<T> operator * (const Matrix<T>& b) const {
        std::vector<std::vector<T>> g(n, std::vector<T>(b.m));
        Matrix<T> c(g);
        assert(m == b.n);
        for (size_t i = 0; i < n; ++i) {
            for (size_t j = 0; j < b.m; ++j) {
                for (size_t k = 0; k < m; ++k) {
                    c.a[i][j] += a[i][k] * b.a[k][j];
                }
            }
        }
        return c;
    }
    Matrix<T> operator*= (const Matrix& b) {
        *this = *this * b;
        return *this;
    }
    Matrix<T> transposed() const {
        std::vector<std::vector<T>> g(m, std::vector<T>(n));
        Matrix<T> c(g);
        for (size_t i = 0; i < n; i++)
            for (size_t j = 0; j < m; j++)
                c.a[j][i] = a[i][j];
        return c;
    }
    Matrix<T> transpose() {
        Matrix<T> c(*this);
        *this = c.transposed();
        return *this;
    }
};

template<typename T>
std::ostream& operator<<(std::ostream& out, const Matrix<T>& b) {
    size_t n = b.size().first, m = b.size().second;
    for (size_t i = 0; i < n; ++i) {
        for (size_t j = 0; j < m; ++j) {
            out << b[i][j];
            if (j != m - 1)
                out << "\t";
        }
        if (i != n - 1)
            out << "\n";
    }
    return out;
}
